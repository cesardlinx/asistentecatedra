# Generated by Django 2.2.1 on 2019-12-28 18:54

import accounts.helpers
import accounts.models
import accounts.validators
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('slug', models.SlugField()),
                ('first_name', models.CharField(max_length=30, null=True, validators=[django.core.validators.MinLengthValidator(3), accounts.validators.validate_alpha], verbose_name='first name')),
                ('last_name', models.CharField(max_length=30, null=True, validators=[django.core.validators.MinLengthValidator(3), accounts.validators.validate_alpha], verbose_name='last name')),
                ('photo', models.ImageField(blank=True, null=True, upload_to=accounts.helpers.get_photo_path, validators=[django.core.validators.FileExtensionValidator(('gif', 'bmp', 'jpeg', 'jpg', 'png'))], verbose_name='foto')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email')),
                ('institution', models.CharField(max_length=100, null=True)),
                ('institution_logo', models.ImageField(blank=True, null=True, upload_to=accounts.helpers.get_logo_path, validators=[django.core.validators.FileExtensionValidator(('gif', 'bmp', 'jpeg', 'jpg', 'png'))], verbose_name='logo de la instituci√≥n')),
                ('allow_notifications', models.BooleanField(default=True)),
                ('email_confirmed', models.BooleanField(default=False)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', accounts.models.UserManager()),
            ],
        ),
    ]
